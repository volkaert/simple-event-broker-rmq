# see https://www.baeldung.com/spring-profiles
spring.profiles.active=@spring.profiles.active@

# Application name and instance id of this component/module
spring.application.name = ${COMPONENT_NAME:SubscriptionManager}
spring.application.instance_id = ${COMPONENT_INSTANCE_ID:${spring.application.name}-${CLUSTER_INDEX:0}}

# Telemetry
broker.telemetry.component-name = ${spring.application.name}
broker.telemetry.component-instance-id = ${spring.application.instance_id}

# Logging
logging.level.fr.volkaert = DEBUG
# For logging.file.name, you must provide only a filename and not a path+filename because of the config in logback-spring.xml
logging.file.name = ${broker.telemetry.component-instance-id}.log

# Timeouts to connect and read the webhooks
broker.connect-timeout-in-seconds-for-subscription-adapter = 2
# Pay attention: the broker.read-timeout-in-seconds-for-subscription-adapter must LONGER than the broker.read-timeout-in-seconds-for-webhooks of the Subscription Adapter module
broker.read-timeout-in-seconds-for-subscription-adapter = 35

# Time to live for webhook errors
broker.default-time-to-live-in-seconds-for-webhook-connection-error = 864000
broker.default-time-to-live-in-seconds-for-webhook-read-timeout-error = 864000
broker.default-time-to-live-in-seconds-for-webhook-server5xx-error = 60
broker.default-time-to-live-in-seconds-for-webhook-client4xx-error = 60
broker.default-time-to-live-in-seconds-for-webhook-auth401or403-error = 60

# Time to live for DeadLetterQueues
# TTL set during queue declaration so cannot be changed afterwards
broker.time-to-live-in-seconds-for-dead-letter-queues = 86400
# TTL set at the message level so can be changed independently of the timeToLiveInSecondsForDeadLetterQueues
broker.time-to-live-in-seconds-for-dead-letter-messages = 86400

# Is event processing active ? Should be true on the primary datacenter and false on the backup datacenter (to avoid duplicate deliveries)
broker.event-processing-active = true

# Eureka Service Discovery
eureka.client.enabled = false
eureka.client.serviceUrl.defaultZone = http://localhost:8761/eureka/
#eureka.client.healthcheck.enabled = true
eureka.client.registryFetchIntervalSeconds = 10
eureka.client.initialInstanceInfoReplicationIntervalSeconds = 30
eureka.client.instanceInfoReplicationIntervalSeconds = 10
eureka.instance.instance-id = ${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id}
eureka.instance.leaseRenewalIntervalInSeconds = 5
eureka.instance.leaseExpirationDurationInSeconds = 10
spring.cloud.loadbalancer.ribbon.enabled = false

# Actuator endpoints (including liveness et readiness probes)
management.endpoints.web.exposure.include = *
management.endpoint.health.show-details = always
management.endpoint.health.show-components = always
#management.health.probes.enabled = true
#management.endpoint.health.group.liveness.include = livenessState,subscriptionManagerLiveness
#management.endpoint.health.group.readiness.include = readinessState,subscriptionManagerReadiness
#management.endpoint.health.roles = PROBES

# Graceful Shutdown (requires Spring Boot >= 2.3.x)
server.shutdown = graceful
spring.lifecycle.timeout-per-shutdown-phase = 5s

